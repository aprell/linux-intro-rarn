{"name":"Linux-Einführung","tagline":"","body":"Einführung in die Benutzung von Linux im Rahmen der Vorlesung _Rechnerarchitektur und Rechnernetze_ am\r\nLehrstuhl für Angewandte Informatik II  \r\nUniversität Bayreuth  \r\nWintersemester 2013/14\r\n\r\n## Linux?\r\n\r\n- Linux bezeichnet eigentlich nur den Betriebssystem-Kernel\r\n- Kernel + System- und Anwenderprogramme = vollständiges Betriebssystem für\r\n  Endanwender (Distribution)\r\n- Es gibt zahllose Distributionen, zu viele, um sie alle aufzuzählen\r\n- Aktuelle Spitzenplätze auf [distrowatch.com](http://distrowatch.com)\r\n  (Oktober 2013): 1. [Mint](http://www.linuxmint.com), 2.\r\n  [Debian](http://www.debian.org/), 3. [Ubuntu](http://www.ubuntu.com/)\r\n- Weitere bekannte Distributionen: [Fedora](http://fedoraproject.org),\r\n  [openSUSE](http://de.opensuse.org), [Mageia](http://www.mageia.org),\r\n  [Gentoo](http://www.gentoo.org), ...\r\n- Linux ist weit verbreitet, vor allem auf Servern, Supercomputern, in\r\n  eingebetteten Systemen, auf Smartphones und auf Tablets (Android)\r\n- Desktop-Umgebungen wie [KDE](http://www.kde.org),\r\n  [GNOME](http://www.gnome.org), [Xfce](http://www.xfce.org) oder\r\n  [LXDE](http://lxde.org) bieten grafische Benutzeroberflächen und erleichtern\r\n  den Einstieg\r\n\r\n## $HOME sweet $HOME\r\n\r\n- Linux ist ein Mehrbenutzer-Betriebssystem\r\n- Jeder Benutzer hat ein eigenes Arbeitsverzeichnis (Home-Verzeichnis)\r\n- Dateien und Verzeichnisse außerhalb des eigenen Home-Verzeichnisses können\r\n  nur mit entsprechenden Rechten zugegriffen werden\r\n\r\n### Beispiel\r\n\r\n_Anlegen und Löschen von Ordnern und Dateien in der aktuellen\r\nDesktop-Umgebung_\r\n\r\n![](https://raw.github.com/aprell/linux-intro-rarn/master/mc.png \"Verzeichnisse und Unterverzeichnisse\")\r\n\r\n## Die Kommandozeile\r\n\r\n- Die Kommandozeile bietet Zugriff auf grafische und nichtgrafische Tools\r\n  und Anwendungen; man gibt Befehle ein und bestätigt mit der Eingabetaste\r\n- `man xyz` (manual) liefert Hilfe zu einem bestimmten Befehl `xyz`\r\n- Alles, was folgt, funktioniert auch auf Macs, da OS X und Linux ein\r\n  gemeinsames Vorbild haben: [Unix](http://de.wikipedia.org/wiki/Unix)\r\n\r\n### Beispiel\r\n\r\n_Anlegen und Löschen von Ordnern und Dateien in der Kommandozeile_\r\n\r\nWo befinden wir uns?\r\n\r\n`pwd` (print working directory)\r\n\r\nWir befinden uns in unserem Home-Verzeichnis. Was gibt es hier?\r\n\r\n`ls` (list contents)\r\n\r\nNoch nicht besonders viel. Es kann losgehen:\r\n\r\n1. `mkdir Buch` (make directory)\r\n2. `cd Buch` (change directory)\r\n\r\n\tWir befinden uns jetzt im Verzeichnis `Buch`, das wir soeben angelegt\r\n\thaben.  Die restlichen fehlenden Verzeichnisse können wir der Reihe nach\r\n\toder in einem Rutsch erstellen.\r\n\r\n3. `mkdir Kapitel1 Kapitel1/Abbildungen Kapitel2 Kapitel3`\r\n\r\n\tTipp: Wenn man wie oben ein Verzeichnis und Unterverzeichnis erstellen will,\r\n\tkann man sich mit der Option `-p` ein paar Buchstaben sparen. `-p` steht\r\n\tfür *Parent* und erstellt, wenn nötig, gleich das erste Verzeichnis mit.\r\n\tDas Kommando würde dann so aussehen:\r\n\r\n\t`mkdir -p Kapitel1/Abbildungen Kapitel2 Kapitel3`\r\n\r\n4. `cd Kapitel1`\r\n\r\n\tJetzt befinden wir uns in `Kapitel1`, einem Unterverzeichnis von `Buch`.\r\n\tTilde (`~`) bezeichnet unser Home-Verzeichnis (Neugierige probieren `echo\r\n\t~`). Wir kopieren die Datei `tux.png` von `Downloads` nach `Abbildungen`.\r\n\tMit `echo` erzeugen wir die Datei `01_Einleitung.txt` und fügen eine erste\r\n\tZeile Text ein.  Da wir uns in `Buch/Kapitel1` befinden, bringt uns `cd\r\n\t..` in das übergeordnete Verzeichnis `Buch` zurück.\r\n\r\n5. `cp ~/Downloads/tux.png Abbildungen` (copy)\r\n6. `echo \"## Einleitung\" > 01_Einleitung.txt`\r\n7. `cd ..`\r\n\r\n\tWir kopieren nun alle Bilder mit der Endung `tif` von `Downloads` ins\r\n\taktuelle Verzeichnis (`Buch`). Mit `echo` erzeugen wir analog zu 6. die\r\n\tDatei `Inhalt.txt`. Fertig!\r\n\r\n8. `cp ~/Downloads/*.tif .`\r\n9. `echo \"# Titel\" > Inhalt.txt`\r\n\r\nDas war recht mühsam. Schön wäre es, wenn man diesen Vorgang automatisieren\r\nkönnte...\r\n\r\n### Ein einfaches Shell-Skript\r\n\r\n_Shell = Kommandozeileninterpreter_\r\n\r\nUm alle Befehle aus unserem Beispiel \"auf einmal\" auszuführen, erstellen wir\r\neine Datei `newbook.sh` mit folgendem Inhalt:\r\n\r\n```shell\r\nmkdir Buch\r\ncd Buch\r\nmkdir Kapitel1 Kapitel1/Abbildungen Kapitel2 Kapitel3\r\ncd Kapitel1\r\ncp ~/Downloads/tux.png Abbildungen\r\necho \"## Einleitung\" > 01_Einleitung.txt\r\ncd ..\r\ncp ~/Downloads/*.tif .\r\necho \"# Titel\" > Inhalt.txt\r\n```\r\n\r\nKönnen wir die Datei nun als Programm ausführen? Noch nicht...\r\n\r\n`ls -l`\r\n\r\nDie Datei `newbook.sh` kann zwar gelesen und verändert, aber nicht ausgeführt\r\nwerden. Das müssen wir ändern.\r\n\r\n`chmod +x newbook.sh` (change mode)  \r\n`ls -l`\r\n\r\nEt voilà! Mit `mv` verschieben wir `newbook.sh` nach `bin` und mit `cd` ohne\r\nPfadangabe wechseln wir direkt ins Home-Verzeichnis.\r\n\r\n`mv newbook.sh ~/bin` (move)  \r\n`cd`\r\n\r\n Zum Test löschen wir unser oben angelegtes `Buch`. Bereit? Dann los:\r\n\r\n`newbook.sh`\r\n\r\n### Zum Schluss\r\n\r\nKommandos lassen sich verketten: `a | b` bedeutet, die Ausgabe bzw. das\r\nErgebnis von `a` wird als Eingabe von `b` verwendet. Extrem nützlich! Drei\r\nkurze Beispiele:\r\n\r\n`find -name '*.txt' | wc -l` ermittelt die Anzahl der Textdateien im\r\naktuellen Verzeichnis einschließlich aller Unterverzeichnisse.\r\n\r\n`echo \"4/3 * 3.14159 * 2.25^3\" | bc` bestimmt den Wert des in Klammern\r\nstehenden arithmetischen Ausdrucks (`bc` ist ein Taschenrechner).\r\n\r\n`history | tr -s \" \" | cut -d\" \" -f3 | sort | uniq -c | sort -nr | head` zeigt\r\ndie \"Top 10\" der am häufigsten benutzten Kommandos.  \r\n\r\nDas letzte Beispiel lässt erahnen, der Fantasie sind nahezu keine Grenzen\r\ngesetzt.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}